package Task3;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.SwingWorker.StateValue;
import javax.swing.table.DefaultTableModel;

/**
 * Offers a UI for hashing strings and cracking hashes via brute force.
 * @author Matthew Carpenter 14012396
 */
public class SHA1HashApp extends javax.swing.JFrame {

    // <editor-fold defaultstate="collapsed" desc="Variables">
    
    private final static String CHARACTER_STRING = "abcdefghijklmnopqrstuvwxyz0123456789 ";
    private final byte[] CHARACTERS;
    private final byte[] CHARACTERS_REVERSED;
    private final byte[] CHARACTERS_CENTER;
    private final String[] COLUMN_NAMES;
    private final DefaultTableModel DEFAULT_MODEL;
    
    private BruteForceWorker[] workers;
    private BruteForceWorker[][] multiWorkers;
    private String[][] multiBruteForceResponses;
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Constructor">
    
    /**
     * Creates new form SHA1HashApp
     */
    public SHA1HashApp() {
        this.CHARACTERS = CHARACTER_STRING.getBytes();
        this.CHARACTERS_REVERSED = new StringBuilder(CHARACTER_STRING).reverse().toString().getBytes();
        this.CHARACTERS_CENTER = "rsqtpuovnwmxlykzj0i1h2g3f4e5d6c7b8a9 ".getBytes();
        COLUMN_NAMES = new String[] {"Password", "Strings Checked", "Time Taken"};
        DEFAULT_MODEL = new DefaultTableModel(COLUMN_NAMES, 0);
        initComponents();
        tbBruteForceMulti.setModel(DEFAULT_MODEL);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator4 = new javax.swing.JSeparator();
        lblEnterPassword = new javax.swing.JLabel();
        txtbPassword = new javax.swing.JTextField();
        btnGenerate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtbHashedPassword = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        lblConfigure = new javax.swing.JLabel();
        txtbPasswordLength = new javax.swing.JTextField();
        lblHash = new javax.swing.JLabel();
        txtbHash = new javax.swing.JTextField();
        btnBruteForce = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtbBruteForcePassword = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        lblEnterHashes = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtbBruteForceMulti = new javax.swing.JTextArea();
        btnBruteForceMulti = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        lblmaxLengthMulti = new javax.swing.JLabel();
        txtbMaxLengthMulti = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbBruteForceMulti = new javax.swing.JTable();
        combConfig = new javax.swing.JComboBox();
        lblConfig = new javax.swing.JLabel();
        lblMultiConfig = new javax.swing.JLabel();
        combMultiConfig = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblEnterPassword.setText("Enter password:");

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        txtbHashedPassword.setEditable(false);
        txtbHashedPassword.setColumns(20);
        txtbHashedPassword.setRows(5);
        jScrollPane1.setViewportView(txtbHashedPassword);

        lblConfigure.setText("Max Length:");

        lblHash.setText("Hash:");

        btnBruteForce.setText("Brute Force");
        btnBruteForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBruteForceActionPerformed(evt);
            }
        });

        txtbBruteForcePassword.setEditable(false);
        txtbBruteForcePassword.setColumns(20);
        txtbBruteForcePassword.setRows(5);
        jScrollPane2.setViewportView(txtbBruteForcePassword);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lblEnterHashes.setText("Enter hashes (one per line):");

        txtbBruteForceMulti.setColumns(20);
        txtbBruteForceMulti.setRows(5);
        jScrollPane3.setViewportView(txtbBruteForceMulti);

        btnBruteForceMulti.setText("Brute Force");
        btnBruteForceMulti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBruteForceMultiActionPerformed(evt);
            }
        });

        lblmaxLengthMulti.setText("Max Length:");

        tbBruteForceMulti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tbBruteForceMulti);

        combConfig.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Standard", "Reverse", "Center", "Dual", "Triple" }));

        lblConfig.setText("Config:");

        lblMultiConfig.setText("Config:");

        combMultiConfig.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Standard", "Reverse", "Center", "Dual", "Triple" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblEnterPassword)
                        .addGap(4, 4, 4)
                        .addComponent(txtbPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnGenerate))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblConfigure)
                        .addGap(4, 4, 4)
                        .addComponent(txtbPasswordLength, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblConfig)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBruteForce))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblHash)
                        .addGap(36, 36, 36)
                        .addComponent(txtbHash, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblEnterHashes)
                        .addGap(33, 33, 33)
                        .addComponent(lblmaxLengthMulti)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtbMaxLengthMulti, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMultiConfig)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combMultiConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBruteForceMulti))
                    .addComponent(jSeparator3)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(lblEnterPassword))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(txtbPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnGenerate)
                            .addComponent(btnBruteForceMulti)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblEnterHashes)
                                .addComponent(lblmaxLengthMulti)
                                .addComponent(txtbMaxLengthMulti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(combMultiConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblMultiConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(lblConfigure))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtbPasswordLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblConfig)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnBruteForce)
                                        .addComponent(combConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(lblHash))
                                    .addComponent(txtbHash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Methods">
    
    // <editor-fold defaultstate="collapsed" desc="Event Handlers">
    
    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        String password = txtbPassword.getText();
        String hashedPassword = SHA1Library.SHA1(password);
        txtbHashedPassword.setText(hashedPassword);
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void btnBruteForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBruteForceActionPerformed
        // get values from user interface
        String hash = txtbHash.getText();
        int maxLength = Integer.parseInt(txtbPasswordLength.getText());
        String config = (String)combConfig.getSelectedItem();
        // check hash is correct length
        if (hash.length() != 40) {
            txtbBruteForcePassword.setText("The provided hash is the wrong length.");
            return;
        }
        // disable user interface to prevent clashing
        txtbBruteForcePassword.setText("");
        setSingleCrackUIEnabled(false);
        // depending on selected config value
        switch (config) {
            case "Standard":
                RunSingleCrack(hash, new byte[][] {CHARACTERS}, maxLength);
                break;
            case "Reverse":
                RunSingleCrack(hash, new byte[][] {CHARACTERS_REVERSED}, maxLength);
                break;
            case "Center":
                RunSingleCrack(hash, new byte[][] {CHARACTERS_CENTER}, maxLength);
                break;
            case "Dual":
                RunSingleCrack(hash, new byte[][] {CHARACTERS, CHARACTERS_REVERSED}, maxLength);
                break;
            case "Triple":
                RunSingleCrack(hash, new byte[][] {CHARACTERS, CHARACTERS_REVERSED, CHARACTERS_CENTER}, maxLength);
                break;
        }
    }//GEN-LAST:event_btnBruteForceActionPerformed

    private void btnBruteForceMultiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBruteForceMultiActionPerformed
        // disable user interface to prevent clashing
        setMultiCrackUIEnabled(false);
        // get values from user interface
        String[] hashes = txtbBruteForceMulti.getText().split("\n");
        int maxLength = Integer.parseInt(txtbMaxLengthMulti.getText());
        String config = (String)combMultiConfig.getSelectedItem();
        // initialise response array and table
        multiBruteForceResponses = new String[hashes.length][3];
        for (int i = 0; i < multiBruteForceResponses.length; i++) {
            if (hashes[i].length() != 40) {
                Arrays.fill(multiBruteForceResponses[i], "Provided hash was the wrong length.");
            } else {
                Arrays.fill(multiBruteForceResponses[i], "Cracking password...");
            }
        }
        tbBruteForceMulti.setModel(new DefaultTableModel(multiBruteForceResponses, COLUMN_NAMES));
        // depending on selected config value
        switch (config) {
            case "Standard":
                RunMultiCrack(hashes, new byte[][] {CHARACTERS}, maxLength);
                break;
            case "Reverse":
                RunMultiCrack(hashes, new byte[][] {CHARACTERS_REVERSED}, maxLength);
                break;
            case "Center":
                RunMultiCrack(hashes, new byte[][] {CHARACTERS_CENTER}, maxLength);
                break;
            case "Dual":
                RunMultiCrack(hashes, new byte[][] {CHARACTERS, CHARACTERS_REVERSED}, maxLength);
                break;
            case "Triple":
                RunMultiCrack(hashes, new byte[][] {CHARACTERS, CHARACTERS_REVERSED, CHARACTERS_CENTER}, maxLength);
                break;
        }
    }//GEN-LAST:event_btnBruteForceMultiActionPerformed

    // </editor-fold>
    
    private void RunSingleCrack(String hash, byte[][] characterSets, int maxLength) {
        // create a thread pool for workers
        ExecutorService serv = Executors.newFixedThreadPool(characterSets.length);
        workers = new BruteForceWorker[characterSets.length];
        // for each required worker
        for (int i = 0; i < workers.length; i++) {
            // initialise worker and add property change listener
            workers[i] = new BruteForceWorker(hash, characterSets[i], maxLength, 0, i);
            workers[i].addPropertyChangeListener(new PropertyChangeListener() {
                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        // if property is state and has been set to done
                        if ("state".equals(evt.getPropertyName()) && (StateValue)evt.getNewValue() == StateValue.DONE) {
                            BruteForceWorker bfw = (BruteForceWorker)evt.getSource();
                            boolean success = bfw.getPasswordFound();
                            // if password was found
                            if (success) {
                                // cancel other workers cracking hash
                                for (BruteForceWorker worker : workers) {
                                    if (!worker.isDone()) {
                                        worker.cancel();
                                    }
                                }
                                // enable user interface and set output
                                setSingleCrackUIEnabled(true);
                                txtbBruteForcePassword.setText("Password found: " + bfw.getCrackedPassword() + ".\nChecked " + bfw.getPasswordsChecked() + " passwords.\nSeconds taken: " + bfw.getTimeTaken());
                            } else {
                                // check if other workers are still running
                                boolean running = false;
                                for (BruteForceWorker worker : workers) {
                                    if (!worker.isDone()) {
                                        running = true;
                                    }
                                }
                                // if no other workers are running
                                if (!running) {
                                    // enable user interface and set output
                                    setSingleCrackUIEnabled(true);
                                    txtbBruteForcePassword.setText("Unable to crack password.");
                                }
                            }
                        }
                    }
                });
            // submit worker to thread pool
            serv.submit(workers[i]);
        }
    }
    
    private void RunMultiCrack(String[] hashes, byte[][] characterSets, int maxLength) {
        // create a thread pool for workers
        ExecutorService serv = Executors.newFixedThreadPool(hashes.length * characterSets.length);
        multiWorkers = new BruteForceWorker[hashes.length][characterSets.length];
        // for each hash to crack
        for (int i = 0; i < multiWorkers.length; i++) {
            if (hashes[i].length() != 40) {
                return;
            }
            // for each required worker
            for (int j = 0; j < multiWorkers[i].length; j++) {
                // initialise worker and add property change listener
                multiWorkers[i][j] = new BruteForceWorker(hashes[i], characterSets[j], maxLength, i, j);
                multiWorkers[i][j].addPropertyChangeListener(new PropertyChangeListener() {
                        @Override
                        public void propertyChange(PropertyChangeEvent evt) {
                            // if property is state and has been set to done
                            if ("state".equals(evt.getPropertyName()) && (StateValue)evt.getNewValue() == StateValue.DONE) {
                                BruteForceWorker bfw = (BruteForceWorker)evt.getSource();
                                boolean success = bfw.getPasswordFound();
                                int hashIndex = bfw.getHashIndex();
                                // if password was found
                                if (success) {
                                    // cancel other workers cracking hash
                                    for (BruteForceWorker worker : multiWorkers[hashIndex]) {
                                        if (!worker.isDone()) {
                                            worker.cancel();
                                        }
                                    }
                                    // if all hashes have been cracked or failed
                                    if (isMultiCrackFinished()) {
                                        // enable user interface
                                        setMultiCrackUIEnabled(true);
                                    }
                                    // set response for this hash
                                    setMultiCrackResponse(hashIndex, bfw);
                                } else {
                                    // check if other workers are still running
                                    boolean running = false;
                                    for (BruteForceWorker worker : multiWorkers[hashIndex]) {
                                        if (!worker.isDone()) {
                                            running = true;
                                        }
                                    }
                                    // if no other workers are running
                                    if (!running) {
                                        // if all hashes have been cracked or failed
                                        if (isMultiCrackFinished()) {
                                            // enable user interface
                                            setMultiCrackUIEnabled(true);
                                        }
                                        // set response for this hash
                                        setMultiCrackResponse(hashIndex, bfw);
                                    }
                                }
                            }
                        }
                    });
                // submit worker to thread pool
                serv.submit(multiWorkers[i][j]);
            }
        }
    }
    
    private void setSingleCrackUIEnabled(boolean enabled) {
        btnBruteForce.setEnabled(enabled);
        txtbHash.setEnabled(enabled);
        txtbPasswordLength.setEnabled(enabled);
        txtbBruteForcePassword.setEnabled(enabled);
        combConfig.setEnabled(enabled);
    }
    
    private void setMultiCrackUIEnabled(boolean enabled) {
        btnBruteForceMulti.setEnabled(enabled);
        txtbBruteForceMulti.setEnabled(enabled);
        txtbMaxLengthMulti.setEnabled(enabled);
        combMultiConfig.setEnabled(enabled);
    }
    
    private void setMultiCrackResponse(int hashIndex, BruteForceWorker worker) {
        // if worker has found password, set values
        if (worker.getPasswordFound()) {
            multiBruteForceResponses[hashIndex][0] = worker.getCrackedPassword();
            multiBruteForceResponses[hashIndex][1] = worker.getPasswordsChecked() + "";
            multiBruteForceResponses[hashIndex][2] = worker.getTimeTaken();
        } else {
            Arrays.fill(multiBruteForceResponses[hashIndex], "Unable to crack");
        }
        // update table data
        tbBruteForceMulti.setModel(new DefaultTableModel(multiBruteForceResponses, COLUMN_NAMES));
    }
    
    private boolean isMultiCrackFinished() {
        // for each set of workers
        for (BruteForceWorker[] hashWorkers : multiWorkers) {
            // for each worker
            for (BruteForceWorker worker : hashWorkers) {
                // if not done, return false
                if (worker != null && !worker.isDone()) {
                    return false;
                }
            }
        }
        return true;
    }
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Main">
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SHA1HashApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SHA1HashApp().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBruteForce;
    private javax.swing.JButton btnBruteForceMulti;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JComboBox combConfig;
    private javax.swing.JComboBox combMultiConfig;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lblConfig;
    private javax.swing.JLabel lblConfigure;
    private javax.swing.JLabel lblEnterHashes;
    private javax.swing.JLabel lblEnterPassword;
    private javax.swing.JLabel lblHash;
    private javax.swing.JLabel lblMultiConfig;
    private javax.swing.JLabel lblmaxLengthMulti;
    private javax.swing.JTable tbBruteForceMulti;
    private javax.swing.JTextArea txtbBruteForceMulti;
    private javax.swing.JTextArea txtbBruteForcePassword;
    private javax.swing.JTextField txtbHash;
    private javax.swing.JTextArea txtbHashedPassword;
    private javax.swing.JTextField txtbMaxLengthMulti;
    private javax.swing.JTextField txtbPassword;
    private javax.swing.JTextField txtbPasswordLength;
    // End of variables declaration//GEN-END:variables

    // </editor-fold>

}
