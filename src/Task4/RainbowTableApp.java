package Task4;

import Task3.SHA1Library;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Offers a UI for generating rainbow tables and cracking hashes via rainbow table.
 * @author Matthew Carpenter 14012396
 */
public class RainbowTableApp extends javax.swing.JFrame {

    // <editor-fold defaultstate="collapsed" desc="Variables">
    
    private int currentlyLoadedMaximumStringLength = -1;
    private int currentlyLoadedChainLength = -1;
    private byte[] currentlyLoadedCharacterSet = null;
    private HashMap<String, String> currentlyLoadedRainbowTable = null;
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Constructor">
    
    /**
     * Creates new form RainbowTableApp
     */
    public RainbowTableApp() {
        initComponents();
        // Create new DocumentListener to update BtnGenerateTable
        DocumentListener docListener = new DocumentListener() {
            
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateBtnGenerateTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateBtnGenerateTable();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateBtnGenerateTable();
            }
            
        };
        // Add DocumentListener to text input fields
        txtbStringLength.getDocument().addDocumentListener(docListener);
        txtbTableSize.getDocument().addDocumentListener(docListener);
        txtbChainLength.getDocument().addDocumentListener(docListener);
        txtbCustomAlphabet.getDocument().addDocumentListener(docListener);
        updateBtnGenerateTable();
        scrollCustomAlphabet.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabMain = new javax.swing.JTabbedPane();
        panelGenerateTable = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtbStringLength = new javax.swing.JTextField();
        txtbTableSize = new javax.swing.JTextField();
        txtbChainLength = new javax.swing.JTextField();
        btnGenerateTable = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        combAlphabet = new javax.swing.JComboBox<>();
        scrollCustomAlphabet = new javax.swing.JScrollPane();
        txtbCustomAlphabet = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        panelCrackPassword = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnLoadRainbowTable = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblTableStringLength = new javax.swing.JLabel();
        lblTableTableSize = new javax.swing.JLabel();
        lblTableChainLength = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtbTableAlphabet = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        txtbHash = new javax.swing.JTextField();
        btnCrack = new javax.swing.JButton();
        txtbPasswordResult = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        btnGenerateRandom = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtbRandomCrack = new javax.swing.JTextArea();
        btnAttemptCrack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("String length:");

        jLabel2.setText("Table size:");

        jLabel3.setText("Chain length:");

        btnGenerateTable.setText("Generate Table");
        btnGenerateTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateTableActionPerformed(evt);
            }
        });

        jLabel4.setText("Alphabet:");

        combAlphabet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lowercase", "Uppercase", "Lowercase and Digits", "Letters and Digits", "Custom" }));
        combAlphabet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combAlphabetActionPerformed(evt);
            }
        });

        txtbCustomAlphabet.setColumns(20);
        txtbCustomAlphabet.setRows(5);
        scrollCustomAlphabet.setViewportView(txtbCustomAlphabet);

        javax.swing.GroupLayout panelGenerateTableLayout = new javax.swing.GroupLayout(panelGenerateTable);
        panelGenerateTable.setLayout(panelGenerateTableLayout);
        panelGenerateTableLayout.setHorizontalGroup(
            panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGenerateTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(panelGenerateTableLayout.createSequentialGroup()
                        .addGroup(panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelGenerateTableLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtbTableSize))
                            .addGroup(panelGenerateTableLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtbChainLength))
                            .addGroup(panelGenerateTableLayout.createSequentialGroup()
                                .addGroup(panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtbStringLength)
                                    .addComponent(combAlphabet, 0, 150, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelGenerateTableLayout.createSequentialGroup()
                                .addComponent(btnGenerateTable)
                                .addGap(0, 31, Short.MAX_VALUE))
                            .addComponent(scrollCustomAlphabet, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelGenerateTableLayout.setVerticalGroup(
            panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGenerateTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelGenerateTableLayout.createSequentialGroup()
                        .addGroup(panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(combAlphabet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtbStringLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtbTableSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(scrollCustomAlphabet, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelGenerateTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtbChainLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerateTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(243, Short.MAX_VALUE))
        );

        tabMain.addTab("Generate Table", panelGenerateTable);

        jLabel5.setText("Rainbow Table:");

        btnLoadRainbowTable.setText("Load from file");
        btnLoadRainbowTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadRainbowTableActionPerformed(evt);
            }
        });

        jLabel6.setText("String length:");

        jLabel7.setText("Table size:");

        jLabel8.setText("Chain length:");

        txtbTableAlphabet.setEditable(false);
        txtbTableAlphabet.setColumns(20);
        txtbTableAlphabet.setRows(5);
        jScrollPane1.setViewportView(txtbTableAlphabet);

        jLabel9.setText("Alphabet:");

        jLabel10.setText("Enter hash:");

        btnCrack.setText("Crack");
        btnCrack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrackActionPerformed(evt);
            }
        });

        txtbPasswordResult.setEditable(false);

        btnGenerateRandom.setText("Generate 10 random hashes");
        btnGenerateRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateRandomActionPerformed(evt);
            }
        });

        txtbRandomCrack.setEditable(false);
        txtbRandomCrack.setColumns(20);
        txtbRandomCrack.setRows(5);
        jScrollPane2.setViewportView(txtbRandomCrack);

        btnAttemptCrack.setText("Attempt crack");
        btnAttemptCrack.setEnabled(false);
        btnAttemptCrack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttemptCrackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCrackPasswordLayout = new javax.swing.GroupLayout(panelCrackPassword);
        panelCrackPassword.setLayout(panelCrackPasswordLayout);
        panelCrackPasswordLayout.setHorizontalGroup(
            panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCrackPasswordLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(panelCrackPasswordLayout.createSequentialGroup()
                        .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelCrackPasswordLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnLoadRainbowTable))
                            .addGroup(panelCrackPasswordLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(lblTableChainLength, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelCrackPasswordLayout.createSequentialGroup()
                                .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTableStringLength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblTableTableSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(10, 10, 10)
                        .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addGroup(panelCrackPasswordLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(panelCrackPasswordLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCrack))
                    .addComponent(txtbHash)
                    .addComponent(txtbPasswordResult)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelCrackPasswordLayout.createSequentialGroup()
                        .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnGenerateRandom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAttemptCrack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        panelCrackPasswordLayout.setVerticalGroup(
            panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCrackPasswordLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(btnLoadRainbowTable)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelCrackPasswordLayout.createSequentialGroup()
                        .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(lblTableStringLength))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(lblTableTableSize))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(lblTableChainLength)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(btnCrack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtbHash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtbPasswordResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCrackPasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCrackPasswordLayout.createSequentialGroup()
                        .addComponent(btnGenerateRandom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAttemptCrack)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabMain.addTab("Crack Password", panelCrackPassword);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabMain)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabMain)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Methods">
    
    // <editor-fold defaultstate="collapsed" desc="Event Handlers">
    
    private void combAlphabetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combAlphabetActionPerformed
        String newValue = (String)combAlphabet.getSelectedItem();
        // Show custom alphabet entry field if "Custom" was selected
        scrollCustomAlphabet.setVisible("Custom".equals(newValue));
        // Update UI
        this.repaint();
        updateBtnGenerateTable();
    }//GEN-LAST:event_combAlphabetActionPerformed

    private void btnGenerateTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateTableActionPerformed
        try {
            // Read values from text input fields
            String stringLength = txtbStringLength.getText();
            String tableSize = txtbTableSize.getText();
            String chainLength = txtbChainLength.getText();
            // Parse values
            int strLength = Integer.parseInt(stringLength);
            int tblSize = Integer.parseInt(tableSize);
            int chnLength = Integer.parseInt(chainLength);
            // Get character set from UI
            byte[] characterSet = getCharacterSet();
            // Show file chooser to choose save location
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileNameExtensionFilter(".txt file", new String[] {"txt"}));
            fileChooser.showSaveDialog(this);
            // Create new generator
            RainbowTableGenerator generator = new RainbowTableGenerator(characterSet, strLength);
            // Generate the table
            HashMap<String, String> table = generator.generateTable(tblSize, chnLength);
            // Write the table to file
            try (FileWriter fileWriter = new FileWriter(fileChooser.getSelectedFile().getAbsolutePath() + ".txt"); PrintWriter printWriter = new PrintWriter(fileWriter)) {
                // Write table details to file
                printWriter.println(new String(characterSet));
                printWriter.println(stringLength + " " + chnLength);
                // Write table to file
                for (String key : table.keySet()) {
                    printWriter.println(table.get(key) + " " + key);
                }
            }
        }
        // If there was an issue parsing or reading, show an error
        catch (NumberFormatException | IOException ex) {
            JOptionPane.showMessageDialog(this, "There was an error.", "Error", JOptionPane.ERROR);
        }
    }//GEN-LAST:event_btnGenerateTableActionPerformed

    private void btnLoadRainbowTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadRainbowTableActionPerformed
        // Show file chooser to load file
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fileChooser.showOpenDialog(this);
        // If file was selected
        if (fileChooser.getSelectedFile() != null) {
            // Setup file to be read in
            try (FileReader fileReader = new FileReader(fileChooser.getSelectedFile()); BufferedReader bufferedReader = new BufferedReader(fileReader);) {
                // Read in table details
                byte[] characterSet = bufferedReader.readLine().getBytes();
                String[] tableDetails = bufferedReader.readLine().split(" ");
                String currentLine;
                HashMap<String, String> rainbowTable = new HashMap();
                // While there are more lines
                while ((currentLine = bufferedReader.readLine()) != null) {
                    // Read in next chain
                    String[] parts = currentLine.split(" ");
                    rainbowTable.put(parts[1], parts[0]);
                }
                // Set UI output accordingly
                lblTableStringLength.setText(tableDetails[0]);
                lblTableTableSize.setText(rainbowTable.size() + "");
                lblTableChainLength.setText(tableDetails[1]);
                txtbTableAlphabet.setText(new String(characterSet));
                currentlyLoadedMaximumStringLength = Integer.parseInt(tableDetails[0]);
                currentlyLoadedChainLength = Integer.parseInt(tableDetails[1]);
                currentlyLoadedCharacterSet = characterSet;
                String[][] result = new String[rainbowTable.size()][2];
                currentlyLoadedRainbowTable = rainbowTable;
            // If there was an issue parsing or reading, show an error
            } catch (IOException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "There was an error.", "Error", JOptionPane.ERROR);
            }
        }
    }//GEN-LAST:event_btnLoadRainbowTableActionPerformed

    private void btnCrackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrackActionPerformed
        // Ensure that a rainbow table is loaded
        if (currentlyLoadedMaximumStringLength == -1 || currentlyLoadedChainLength == -1 || currentlyLoadedCharacterSet == null || currentlyLoadedRainbowTable == null) {
            JOptionPane.showMessageDialog(this, "No rainbow table loaded.", "Error", JOptionPane.ERROR);
        }
        // Get hash from UI
        String hash = txtbHash.getText();
        // Check validity
        if (hash == null || hash.length() != 40 || !isHex(hash)) {
            JOptionPane.showMessageDialog(this, "Invalid hash entered.", "Error", JOptionPane.ERROR);
        }
        // Create new cracker
        RainbowTableCracker cracker = new RainbowTableCracker(currentlyLoadedRainbowTable, currentlyLoadedChainLength, currentlyLoadedCharacterSet, currentlyLoadedMaximumStringLength);
        // Crack the hash
        String result = cracker.crack(hash);
        // If password was cracked
        if (result != null) {
            txtbPasswordResult.setText(result);
        } else {
            txtbPasswordResult.setText("Unable to crack.");
        }
    }//GEN-LAST:event_btnCrackActionPerformed

    private void btnGenerateRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateRandomActionPerformed
        String result = "";
        // Create new rainbow table library helper
        RainbowTableLibrary lib = new RainbowTableLibrary(currentlyLoadedCharacterSet, currentlyLoadedMaximumStringLength);
        // Generate 10 random hashes
        for (int i = 0; i < 10; i++) {
            result += SHA1Library.SHA1(lib.generateRandomPassword());
            if (i != 9) {
                result += "\n";
            }
        }
        // Update UI
        txtbRandomCrack.setText(result);
        btnAttemptCrack.setEnabled(true);
    }//GEN-LAST:event_btnGenerateRandomActionPerformed

    private void btnAttemptCrackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttemptCrackActionPerformed
        // Get hashes from UI
        String[] hashes = txtbRandomCrack.getText().split("\n");
        String result = "";
        // Check validity of hashes
        for (String hash : hashes) {
            if (hash == null || hash.length() != 40 || !isHex(hash)) {
                JOptionPane.showMessageDialog(this, "Invalid hash entered.", "Error", JOptionPane.ERROR);
            }
        }
        // Create cracker
        RainbowTableCracker cracker = new RainbowTableCracker(currentlyLoadedRainbowTable, currentlyLoadedChainLength, currentlyLoadedCharacterSet, currentlyLoadedMaximumStringLength);
        // For each hash
        for (int i = 0; i < hashes.length; i++) {
            String r = cracker.crack(hashes[i]);
            if (r != null) {
                result += r;
            } else {
                result += "Unable to crack.";
            }
            if (i != 9) {
                result += "\n";
            }
        }
        // Update UI
        txtbRandomCrack.setText(result);
        btnAttemptCrack.setEnabled(false);
    }//GEN-LAST:event_btnAttemptCrackActionPerformed

    // </editor-fold>
    
    private void updateBtnGenerateTable() {
        try {
            // Read values from text input fields
            String stringLength = txtbStringLength.getText();
            String tableSize = txtbTableSize.getText();
            String chainLength = txtbChainLength.getText();
            String alphabet = (String)combAlphabet.getSelectedItem();
            String customAlphabet = txtbCustomAlphabet.getText();
            // Check that values are filled in
            boolean fieldsComplete = stringLength.length() > 0
                    && tableSize.length() > 0
                    && chainLength.length() > 0
                    && (!"Custom".equals(alphabet)) || customAlphabet.length() > 0;
            // Parse values
            int strLength = Integer.parseInt(stringLength);
            int tblSize = Integer.parseInt(tableSize);
            int chnLength = Integer.parseInt(chainLength);
            // Check that all values are valid
            fieldsComplete = fieldsComplete && strLength > 0 && tblSize > 0 && chnLength > 0;
            // Update UI
            btnGenerateTable.setEnabled(fieldsComplete);
        }
        // If error parsing, button should be disabled
        catch (NumberFormatException ex) {
            btnGenerateTable.setEnabled(false);
        }
    }
    
    private byte[] getCharacterSet() {
        // Get selected value from UI
        String alphabet = (String)combAlphabet.getSelectedItem();
        // Return respective value
        switch (alphabet) {
            case "Lowercase":
                return "abcdefghijklmnopqrstuvwxyz".getBytes();
            case "Uppercase":
                return "ABCDEFGHIJKLMNOPQRSTUVWXYZ".getBytes();
            case "Lowercase and Digits":
                return "abcdefghijklmnopqrstuvwxyz0123456789".getBytes();
            case "Letters and Digits":
                return "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".getBytes();
            case "Custom":
                return txtbCustomAlphabet.getText().getBytes();
        }
        return null;
    }
    
    public static boolean isHex(String value) {
        for (int i = 0; i < value.length(); i++) {
            char c = value.charAt(i);
            if (!(c >= '0' && c <= '9' || c >= 'a' && c <= 'f')) {
                return false;
            }
        }
        return true;
    }
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Main">
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RainbowTableApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RainbowTableApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RainbowTableApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RainbowTableApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new RainbowTableApp().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAttemptCrack;
    private javax.swing.JButton btnCrack;
    private javax.swing.JButton btnGenerateRandom;
    private javax.swing.JButton btnGenerateTable;
    private javax.swing.JButton btnLoadRainbowTable;
    private javax.swing.JComboBox<String> combAlphabet;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblTableChainLength;
    private javax.swing.JLabel lblTableStringLength;
    private javax.swing.JLabel lblTableTableSize;
    private javax.swing.JPanel panelCrackPassword;
    private javax.swing.JPanel panelGenerateTable;
    private javax.swing.JScrollPane scrollCustomAlphabet;
    private javax.swing.JTabbedPane tabMain;
    private javax.swing.JTextField txtbChainLength;
    private javax.swing.JTextArea txtbCustomAlphabet;
    private javax.swing.JTextField txtbHash;
    private javax.swing.JTextField txtbPasswordResult;
    private javax.swing.JTextArea txtbRandomCrack;
    private javax.swing.JTextField txtbStringLength;
    private javax.swing.JTextArea txtbTableAlphabet;
    private javax.swing.JTextField txtbTableSize;
    // End of variables declaration//GEN-END:variables

    // </editor-fold>

}
